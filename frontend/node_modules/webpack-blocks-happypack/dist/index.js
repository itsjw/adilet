'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _happypack = require('happypack');

var _happypack2 = _interopRequireDefault(_happypack);

var _webpack = require('@webpack-blocks/webpack2');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

const threadPool = new _happypack2.default.ThreadPool({ size: _os2.default.cpus().length });

const happifyBlock = (block, _ref) => {
  let loaders = _ref.loaders,
      happypackOptions = _objectWithoutProperties(_ref, ['loaders']);

  return (...args) => {
    const compiledBlock = block(...args);
    const originalRules = (0, _utils.getRules)(compiledBlock);

    if (!originalRules) return compiledBlock;

    const plugins = compiledBlock.plugins || [];

    const rules = originalRules.map(rule => {
      const originalLoaders = (0, _utils.extractLoaders)(rule);
      const allowedLoaders = (0, _utils.extractAllowedLoaders)(originalLoaders,
      // eslint-disable-next-line flowtype-errors/show-errors
      (0, _utils.getAllowedLoadersPattern)(loaders));

      if (!allowedLoaders.length) return rule;

      const id = (0, _utils.createRuleId)(rule, (0, _utils.createRuleHash)(rule));

      const plugin = new _happypack2.default(_extends({
        id,
        threadPool,
        loaders: allowedLoaders
      }, (0, _utils.createHappyConfig)(happypackOptions)));

      plugins.push(plugin);

      return (0, _utils.mergeRule)(rule, originalLoaders, allowedLoaders, id);
    });

    return _extends({}, compiledBlock, {
      plugins,
      module: {
        rules
      }
    });
  };
};

/** */
const happypack = (blocks, _ref2 = {}) => {
  var _ref2$loaders = _ref2.loaders;

  let loaders = _ref2$loaders === undefined ? ['babel-loader', 'css-loader'] : _ref2$loaders,
      happypackOptions = _objectWithoutProperties(_ref2, ['loaders']);

  const options = _extends({ loaders }, happypackOptions);

  // istanbul ignore next
  if (process.env.DISABLE_HAPPY) {
    return (0, _webpack.group)(blocks);
  }

  return (0, _webpack.group)(blocks.map(block => Object.assign(happifyBlock(block, options), {
    pre: block.pre,
    post: [].concat(block.post || []).map(postHook => happifyBlock(postHook, options))
  })));
};

module.exports = happypack;